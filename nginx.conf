
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   /Users/jacksparrow414/testidea;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    include servers/*;
    
   #自定义服务器权重,默认是采用轮询方式,可以使用weight,weight值越大,则机器权重比越高
   #upstream dhb {
   #   server 127.0.0.1:8090;
   #   server 127.0.0.1:8060;
   #}
   #自定义文件服务器位置
    server{
        listen 8090;
        server_name localhost;
        #第一种配置的访问路径为 localhost:8090/root路径+location路径,即可访问到固定文件夹下的资源文件
        location /testzip {
             root /Users/jacksparrow414/Desktop;
        }
        #配置静态文件的路径,这是第二种配置,如果路径中包含.jpg这些的,则直接请求到下面的root路径
        #location ~ \.(gif|jpg|png)$ {
        #    root /Users/jacksparrow414/Desktop/testzip;
        #    expires 3d;表示缓存3天
        #} 
    }
   #访问微服务先通过nginx转发到具体的网关地址,nginx转发后会在指定ip+端口后加上当前请求路径
   #例子:网关地址为http://127.0.0.1:8082,我要访问微服务clientTwo的某一个方法,肯定是nignx转发到网关,网关再去注册中心通过
   #ribbon找到负载均衡到具体的微服务,那么我的请求路径直接是localhost:8091/clientTwo/testTwoController/testTwo,即可,
   #转发后的实际路径为http://127.0.0.1:8082/clientTwo/testTwoController/testTwo
    server{
        listen 8091;
        server_name localhost;
        location / {
            proxy_pass http://127.0.0.1:8082;
         }
    }

}
